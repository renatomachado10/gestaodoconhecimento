{
  "cells": [
    {
      "metadata": {
        "collapsed": true
      },
      "cell_type": "markdown",
      "source": "Aluno: Renato Machado Neves"
    },
    {
      "metadata": {},
      "cell_type": "markdown",
      "source": "Matrícula: 0050012586"
    },
    {
      "metadata": {},
      "cell_type": "markdown",
      "source": "Disciplina: Gestão de Conhecimento"
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "from sklearn.datasets import load_breast_cancer",
      "execution_count": 3,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "cancer = load_breast_cancer()",
      "execution_count": 4,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "type(cancer)",
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 5,
          "data": {
            "text/plain": "sklearn.utils.Bunch"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "print(\"cancer.keys(): \\n{}\".format(cancer.keys()))",
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": "cancer.keys(): \ndict_keys(['data', 'target', 'target_names', 'DESCR', 'feature_names', 'filename'])\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "print(cancer.target)",
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "text": "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n 1 0 0 0 0 0 0 0 0 1 0 1 1 1 1 1 0 0 1 0 0 1 1 1 1 0 1 0 0 1 1 1 1 0 1 0 0\n 1 0 1 0 0 1 1 1 0 0 1 0 0 0 1 1 1 0 1 1 0 0 1 1 1 0 0 1 1 1 1 0 1 1 0 1 1\n 1 1 1 1 1 1 0 0 0 1 0 0 1 1 1 0 0 1 0 1 0 0 1 0 0 1 1 0 1 1 0 1 1 1 1 0 1\n 1 1 1 1 1 1 1 1 0 1 1 1 1 0 0 1 0 1 1 0 0 1 1 0 0 1 1 1 1 0 1 1 0 0 0 1 0\n 1 0 1 1 1 0 1 1 0 0 1 0 0 0 0 1 0 0 0 1 0 1 0 1 1 0 1 0 0 0 0 1 1 0 0 1 1\n 1 0 1 1 1 1 1 0 0 1 1 0 1 1 0 0 1 0 1 1 1 1 0 1 1 1 1 1 0 1 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 1 1 1 1 1 1 0 1 0 1 1 0 1 1 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1\n 1 0 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 0 1 1 1 1 0 0 0 1 1\n 1 1 0 1 0 1 0 1 1 1 0 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 0 0\n 0 1 0 0 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 0 1 1 1 1 1 1\n 1 0 1 1 1 1 1 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 1 0 1 1 1 1 1 0 1 1\n 0 1 0 1 1 0 1 0 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1\n 1 1 1 1 1 1 0 1 0 1 1 0 1 1 1 1 1 0 0 1 0 1 0 1 1 1 1 1 0 1 1 0 1 0 1 0 0\n 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n 1 1 1 1 1 1 1 0 0 0 0 0 0 1]\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "print(cancer.target_names)",
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": "['malignant' 'benign']\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "print(cancer.data.shape)",
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": "(569, 30)\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "print(cancer.target.shape)",
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": "(569,)\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "x = cancer.data",
      "execution_count": 11,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "y = cancer.target",
      "execution_count": 12,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "print(x.shape)",
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": "(569, 30)\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "print(y.shape)",
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": "(569,)\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "from sklearn.neighbors import KNeighborsClassifier",
      "execution_count": 15,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "knn = knn = KNeighborsClassifier(n_neighbors=1)",
      "execution_count": 16,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "scrolled": true
      },
      "cell_type": "code",
      "source": "knn.fit(x, y)",
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 19,
          "data": {
            "text/plain": "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n           metric_params=None, n_jobs=None, n_neighbors=1, p=2,\n           weights='uniform')"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "y_pred = knn.predict(x)",
      "execution_count": 20,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "from sklearn import metrics",
      "execution_count": 22,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "print(metrics.accuracy_score(y, y_pred))",
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "text": "1.0\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "knn = knn = KNeighborsClassifier(n_neighbors=5)",
      "execution_count": 24,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "knn.fit(x, y)",
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 25,
          "data": {
            "text/plain": "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n           metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n           weights='uniform')"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "y_pred = knn.predict(x)",
      "execution_count": 26,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "print(metrics.accuracy_score(y, y_pred))",
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "text": "0.9472759226713533\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "from sklearn.linear_model import LogisticRegression",
      "execution_count": 28,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "logreg = LogisticRegression()",
      "execution_count": 29,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "logreg.fit(x, y)",
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "text": "/home/nbuser/anaconda3_501/lib/python3.6/site-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n  FutureWarning)\n",
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "execution_count": 30,
          "data": {
            "text/plain": "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n          intercept_scaling=1, max_iter=100, multi_class='warn',\n          n_jobs=None, penalty='l2', random_state=None, solver='warn',\n          tol=0.0001, verbose=0, warm_start=False)"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "scrolled": true
      },
      "cell_type": "code",
      "source": "logreg.predict(x)",
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 31,
          "data": {
            "text/plain": "array([0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0,\n       1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0,\n       1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0,\n       1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0,\n       0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1,\n       1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0,\n       0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0,\n       1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0,\n       0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0,\n       0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1,\n       1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0,\n       1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1,\n       1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "y_pred = logreg.predict(x)",
      "execution_count": 33,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "len(y_pred)",
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 34,
          "data": {
            "text/plain": "569"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "print(metrics.accuracy_score(y, y_pred))",
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "text": "0.9595782073813708\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "print(x.shape)",
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "text": "(569, 30)\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "print(y.shape)",
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "text": "(569,)\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "from sklearn.model_selection import train_test_split",
      "execution_count": 38,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.4, random_state=4)",
      "execution_count": 40,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "print(X_train.shape)",
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "text": "(341, 30)\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "print(X_test.shape)",
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "text": "(228, 30)\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "print(y_train.shape)",
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "text": "(341,)\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "print(y_test.shape)",
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "text": "(228,)\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "logreg = LogisticRegression()",
      "execution_count": 46,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "logreg.fit(X_train, y_train)",
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "text": "/home/nbuser/anaconda3_501/lib/python3.6/site-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n  FutureWarning)\n",
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "execution_count": 48,
          "data": {
            "text/plain": "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n          intercept_scaling=1, max_iter=100, multi_class='warn',\n          n_jobs=None, penalty='l2', random_state=None, solver='warn',\n          tol=0.0001, verbose=0, warm_start=False)"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "y_pred = logreg.predict(X_test)",
      "execution_count": 49,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "print(metrics.accuracy_score(y_test, y_pred))",
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "stream",
          "text": "0.9122807017543859\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "knn = KNeighborsClassifier(n_neighbors=5)",
      "execution_count": 51,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "knn.fit(X_train, y_train)",
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 52,
          "data": {
            "text/plain": "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n           metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n           weights='uniform')"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "y_pred = knn.predict(X_test)",
      "execution_count": 53,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "print(metrics.accuracy_score(y_test, y_pred))",
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "text": "0.9078947368421053\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "knn = KNeighborsClassifier(n_neighbors=1)",
      "execution_count": 55,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "knn.fit(X_train, y_train)",
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 56,
          "data": {
            "text/plain": "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n           metric_params=None, n_jobs=None, n_neighbors=1, p=2,\n           weights='uniform')"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "y_pred = knn.predict(X_test)",
      "execution_count": 57,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "print(metrics.accuracy_score(y_test, y_pred))",
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "stream",
          "text": "0.9035087719298246\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "k_range = list(range(1, 25))",
      "execution_count": 62,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "scores = []",
      "execution_count": 63,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "for k in k_range:\n    knn = KNeighborsClassifier(n_neighbors=k)\n    knn.fit(X_train, y_train)\n    y_pred = knn.predict(X_test)\n    scores.append(metrics.accuracy_score(y_test, y_pred))",
      "execution_count": 64,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "import matplotlib.pyplot as plt\n",
      "execution_count": 65,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "%matplotlib inline",
      "execution_count": 66,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "plt.plot(k_range, scores)",
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 67,
          "data": {
            "text/plain": "[<matplotlib.lines.Line2D at 0x7f9d8c556c88>]"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": "<Figure size 432x288 with 1 Axes>"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "plt.xlabel('Value of K for KNN')",
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 68,
          "data": {
            "text/plain": "Text(0.5, 0, 'Value of K for KNN')"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": "<Figure size 432x288 with 1 Axes>"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "plt.ylabel('Testing Accuracy')",
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 69,
          "data": {
            "text/plain": "Text(0, 0.5, 'Testing Accuracy')"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": "<Figure size 432x288 with 1 Axes>"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "scrolled": true
      },
      "cell_type": "code",
      "source": "plt.plot(k_range, scores)\nplt.xlabel('Value of K for KNN')\nplt.ylabel('Testing Accuracy')",
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 70,
          "data": {
            "text/plain": "Text(0, 0.5, 'Testing Accuracy')"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": "<Figure size 432x288 with 1 Axes>"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "knn = KNeighborsClassifier(n_neighbors=8)\nknn.fit(x, y)\ny_pred = knn.predict(x)\nprint(metrics.accuracy_score(y, y_pred))",
      "execution_count": 73,
      "outputs": [
        {
          "output_type": "stream",
          "text": "0.9384885764499121\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "knn = KNeighborsClassifier(n_neighbors=11)\nknn.fit(x, y)\ny_pred = knn.predict(x)\nprint(metrics.accuracy_score(y, y_pred))",
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "stream",
          "text": "0.9402460456942003\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true
      },
      "cell_type": "code",
      "source": "",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python36",
      "display_name": "Python 3.6",
      "language": "python"
    },
    "language_info": {
      "mimetype": "text/x-python",
      "nbconvert_exporter": "python",
      "name": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.6",
      "file_extension": ".py",
      "codemirror_mode": {
        "version": 3,
        "name": "ipython"
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}
